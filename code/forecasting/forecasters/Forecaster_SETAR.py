import numpy as np
import matplotlib.pyplot as plt
from SETAR_mod import SETAR
import setar_model
import statsmodels.api as sm
import pandas as pd
from time import time

# SETAR: Self-Excited Threshold AR
# more on SETAR here: 
# https://www.researchgate.net/publication/270961725_Time_Series_Forecasting_for_Nonlinear_and_Nonstationary_Processes_A_Review_and_Comparative_Study
# Also followed this guide https://www.chadfulton.com/topics/setar_model_functionality.html

class Forecaster_SETAR:
    def __init__(self) -> None:
        self.model = None
    def Forecast(self, trace, forecast_window, int_val_prediction, params):
        '''
        trace: observed time series
        n: number of values to be forecasted
        '''
        trace = np.array(trace)
        mod = SETAR(endog=trace, order=6, delay=10, ar_order=10, thresholds=(1,2,3,4,5))
        res = mod.fit()
        predictions = res.predict()[:forecast_window]
        if int_val_prediction is True:
            quantized_predictions = [round(p) for p in predictions]
            return quantized_predictions
        else:
            return predictions

if __name__ == "__main__":
    forecaster = Forecaster_SETAR()
    idle_burst = [2, 0, 0, 1, 1, 0, 0, 0, 4, 4, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 0, 3, 0, 0, 2, 1, 0, 0, 3, 2, 0, 2, 0, 0, 0, 1, 3, 1, 2, 3, 1, 0, 1, 0, 0, 1, 1, 0, 1, 3, 0, 0, 0, 0, 1, 0, 1, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 0, 1, 0, 0, 0, 0, 0, 3, 3, 0, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 4, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 1, 0, 1, 0, 1, 0, 0, 0, 4, 3, 0, 1, 2, 1, 0, 0, 0, 0, 1, 4, 2, 1, 0, 1, 2, 2, 0, 1, 3, 4, 0, 0, 0, 0, 0, 1, 0, 0, 4, 2, 1, 0, 2, 0, 0, 0, 1, 0, 3, 2, 0, 1, 0, 0, 0, 0, 2, 0, 1, 3, 0, 1, 0, 1, 0, 1, 0, 0, 4, 3, 1, 1, 1, 1, 0, 1, 0, 0, 4, 3, 0, 0, 1, 0, 0, 1, 0, 1, 2, 4, 0, 0, 0, 0, 0, 1, 1, 0, 2, 4, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 2, 0, 1, 2, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 3, 3, 0, 0, 2, 1, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 1, 0, 0, 0, 4, 2, 0, 0, 1, 0, 1, 0, 0, 0, 3, 3, 1, 0, 0, 1, 1, 1, 1, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 1, 0, 1, 0, 0, 0, 4, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 1, 0, 0, 3, 4, 0, 2, 1, 0, 0, 0, 0, 0, 4, 3, 1, 0, 0, 0, 1, 1, 0, 1, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 5, 3, 1, 2, 0, 0, 0, 0, 0, 0, 3, 2]
    periodic_nonlinear = [0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10]
    multiple_periods = [3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4, 2, 1, 2, 6, 5, 4, 3, 2, 3, 4, 6, 5, 4, 3, 4, 1, 1, 6, 5, 4, 3, 2, 2, 3, 6, 5, 4, 3, 3, 4, 0, 6, 5, 4, 4]
    step_uniform = [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0]
    poisson = [1, 2, 0, 0, 3, 2, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 3, 0, 1, 0, 1, 1, 1, 1, 0, 5, 0, 0, 0, 0, 1, 1, 0, 1, 1, 2, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 0, 2, 2, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0, 2, 2, 1, 2, 0, 1, 0, 0, 2, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 3, 0, 4, 0, 0, 2, 0, 1, 0, 2, 0, 1, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 1, 0, 1, 3, 0, 4, 0, 1, 0, 0, 2, 1, 2, 2, 2, 0, 4, 2, 3, 1, 1, 1, 0, 1, 0, 1, 0, 2, 1, 0, 1, 3, 0, 1, 1, 0, 3, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 2, 1, 2, 0, 0, 1, 2, 1, 1, 1, 2, 0, 0, 0, 0, 1, 0, 1, 1, 0, 3, 1, 0, 3, 1, 0, 2, 2, 3, 1, 0, 1, 0, 3, 1, 0, 3, 0, 1, 1, 1, 0, 0, 2, 0, 1, 2, 0, 2, 4, 0, 2, 1, 1, 1, 0, 0, 2, 1, 0, 1, 1, 1, 3, 2, 2, 1, 1, 0, 3, 0, 0, 1, 1, 3, 0, 2, 4, 2, 0, 0, 1, 1, 1, 3, 1, 0, 5, 2, 1, 2, 2, 0, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 2, 3, 2, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 0, 1, 1, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 3, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0, 2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1]
    unique = [i for i in range(80)] * 5 # this will give 2 thresholds
    trace = idle_burst


    forecast_window = 60
    ar_order = 10
    
    min_regime_num = np.ceil(0.1 * len(trace))
    print(min_regime_num)
    order = max(len(np.unique(trace[:-ar_order])) // min_regime_num, 1)
    print(order)
    mod = setar_model.SETAR(np.array(trace), order=1, ar_order=ar_order).fit()
    predictions_2 = mod.forecast(steps=60, initial=np.array(trace))

    plt.plot(range(len(trace)), trace, marker="o", color="black")
    plt.plot(
        [len(trace) + i for i in range(forecast_window)],
        predictions_2,
        marker="o",
        color="blue",
    )
    plt.savefig("trace.png")



    """Provided example from https://www.chadfulton.com/topics/setar_model_functionality.html"""
    #dta = sm.datasets.sunspots.load_pandas().data
    #dta.index = pd.Index(sm.tsa.datetools.dates_from_range('1700', '2008'))
    #del dta["YEAR"]
    #print(dta)
    ##dta.plot(figsize=(12,8))
    #endog = np.array([j for i in dta.values for j in i])

    #setar_mod23 = setar_model.SETAR(endog, 2, 3).fit()
    #before = time()
    #predict_setar_mod23 = setar_mod23.predict(259, 312, dynamic=True)
    #print(time() - before)
    #print(len(predict_setar_mod23))
    #ax = dta['1950':].plot(figsize=(12,8))
    #ax.legend()
    #ax.axis((-20.0, 38.0, -4.0, 200.0))

      
    #plt.plot(range(len(trace)), trace, marker="o", color="black")
    #plt.plot(range(250,309), endog[250:309], color="black")
    #plt.plot(
        #[263 + i for i in range(54)],
        #predict_setar_mod23,
        #marker="o",
        #color="blue",
    #)
    #plt.savefig("trace.png")

